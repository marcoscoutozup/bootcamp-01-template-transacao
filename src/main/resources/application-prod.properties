# Nome da Aplicação
spring.application.name=${APPLICATION_NAME}

# Formato da chave (String) recebida!
spring.kafka.consumer.key-deserializer=org.apache.kafka.common.serialization.StringSerializer

# Formato da mensagem \ evento (JSON) recebida(o)!
spring.kafka.consumer.value-deserializer=org.springframework.kafka.support.serializer.JsonDeserializer

# Identificador do grupo de consumo
spring.kafka.consumer.group-id=${KAFKA_CONSUMER_GROUP_ID}

# Modelo de coleta do consumidor (latest, earliest, none)
spring.kafka.consumer.auto-offset-reset=${KAFKA_AUTO-OFFSET-RESET}

# Tópicos que a aplicação irá ouvir
spring.kafka.topic.transactions=${TOPICS}

# Postgres
spring.datasource.url=${DB_URL_BASE}jdbc:postgresql://localhost:5433/transacao
spring.datasource.username=${DB_USERNAME}
spring.datasource.password=${PASSWORD}
spring.datasource.driverClassName=${DB_DRIVER}

# Query
resultados.quantidade.maxima=${QUANTIDADE_RESULTADOS}

# Security
spring.security.oauth2.resourceserver.jwt.issuer-uri=${KEYCLOAK_ISSUER_URI}
spring.security.oauth2.resourceserver.jwt.jwk-set-uri=${KEYCLOAK_JWKS_URI}

# Opentracing - Jaeger
opentracing.jaeger.enabled=${JAEGER_ENABLED}
opentracing.jaeger.service-name=${spring.application.name}
opentracing.jaeger.http-sender.url=${JAEGER_ENDPOINT}
opentracing.jaeger.probabilistic-sampler.sampling-rate=${JAEGER_SAMPLER}

# Actuator
management.endpoints.web.exposure.include=${ENDPOINTS_PROMETHEUS}
management.metrics.tags.aplicacao=${NOME_DA_APLICACAO}